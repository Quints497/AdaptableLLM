from abc import ABC, abstractmethod

class LLMAdapter(ABC):
    """
    Abstract base class for LLM (Large Language Model) adapters.
    """

    @abstractmethod
    def __init__(self, model_path, n_gpu_layers, n_batch, n_ctx, verbose, prompt_template):
        """
        Initializes the LLMAdapter.

        Args:
            model_path (str): The path to the LLM model.
            n_gpu_layers (int): The number of GPU layers.
            n_batch (int): The batch size.
            n_ctx (int): The context size.
            verbose (bool): Whether to enable verbose mode.
            prompt_template (str): The template for generating prompts.
        """
        pass

    @abstractmethod
    def init_logging(self):
        """
        Initializes the logging for the LLMAdapter.
        """
        pass

    @abstractmethod
    def invoke(self, prompt: str, **parameters):
        """
        Invokes the LLM with the given prompt.

        Args:
            prompt (str): The prompt to be passed to the LLM.
            **parameters: Additional parameters.

        Returns:
            The response generated by the LLM.
        """
        pass

    @abstractmethod
    def prompt_format(self, prompt: str) -> str:
        """
        Formats the given prompt.

        Args:
            prompt (str): The prompt to be formatted.

        Returns:
            The formatted prompt.
        """
        pass

    @abstractmethod
    def parse_response(self, output) -> str:
        """
        Parses the response generated by the LLM.

        Args:
            output: The output generated by the LLM.

        Returns:
            The parsed response.
        """
        pass
